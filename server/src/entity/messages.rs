//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "messages")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub chat_id: i32,
    pub sender_id: i32,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    pub read: i8,
    pub timestamp: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::chats::Entity",
        from = "Column::ChatId",
        to = "super::chats::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chats,
    #[sea_orm(has_many = "super::message_reads::Entity")]
    MessageReads,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::SenderId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::chats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chats.def()
    }
}

impl Related<super::message_reads::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MessageReads.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::message_reads::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::message_reads::Relation::Messages.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
