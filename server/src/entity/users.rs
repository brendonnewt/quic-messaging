//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    pub password_hash: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::chat_members::Entity")]
    ChatMembers,
    #[sea_orm(has_many = "super::message_reads::Entity")]
    MessageReads,
    #[sea_orm(has_many = "super::messages::Entity")]
    Messages,
}

impl Related<super::chat_members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ChatMembers.def()
    }
}

impl Related<super::message_reads::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MessageReads.def()
    }
}

impl Related<super::chats::Entity> for Entity {
    fn to() -> RelationDef {
        super::chat_members::Relation::Chats.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::chat_members::Relation::Users.def().rev())
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        super::message_reads::Relation::Messages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::message_reads::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
